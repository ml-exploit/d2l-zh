
.. _sec_seq2seq:

序列到序列学习（seq2seq）
=========================


正如我们在 :numref:`sec_machine_translation`\ 中看到的，
机器翻译中的输入序列和输出序列都是长度可变的。 为了解决这类问题，我们在
:numref:`sec_encoder-decoder`\ 中
设计了一个通用的”编码器－解码器“架构。
本节，我们将使用两个循环神经网络的编码器和解码器，
并将其应用于\ *序列到序列*\ （sequence to
sequence，seq2seq）类的学习任务
:cite:`Sutskever.Vinyals.Le.2014,Cho.Van-Merrienboer.Gulcehre.ea.2014`\ 。

遵循编码器－解码器架构的设计原则，
循环神经网络编码器使用长度可变的序列作为输入，
将其转换为固定形状的隐状态。
换言之，输入序列的信息被\ *编码*\ 到循环神经网络编码器的隐状态中。
为了连续生成输出序列的词元，
独立的循环神经网络解码器是基于输入序列的编码信息
和输出序列已经看见的或者生成的词元来预测下一个词元。
:numref:`fig_seq2seq`\ 演示了
如何在机器翻译中使用两个循环神经网络进行序列到序列学习。

.. _fig_seq2seq:

.. figure:: ../img/seq2seq.svg

   使用循环神经网络编码器和循环神经网络解码器的序列到序列学习


在 :numref:`fig_seq2seq`\ 中， 特定的“<eos>”表示序列结束词元。
一旦输出序列生成此词元，模型就会停止预测。
在循环神经网络解码器的初始化时间步，有两个特定的设计决定：
首先，特定的“<bos>”表示序列开始词元，它是解码器的输入序列的第一个词元。
其次，使用循环神经网络编码器最终的隐状态来初始化解码器的隐状态。
例如，在 :cite:`Sutskever.Vinyals.Le.2014`\ 的设计中，
正是基于这种设计将输入序列的编码信息送入到解码器中来生成输出序列的。
在其他一些设计中 :cite:`Cho.Van-Merrienboer.Gulcehre.ea.2014`\ ， 如
:numref:`fig_seq2seq`\ 所示，
编码器最终的隐状态在每一个时间步都作为解码器的输入序列的一部分。 类似于
:numref:`sec_language_model`\ 中语言模型的训练，
可以允许标签成为原始的输出序列， 从源序列词元“<bos>”“Ils”“regardent”“.”
到新序列词元 “Ils”“regardent”“.”“<eos>”来移动预测的位置。

下面，我们动手构建 :numref:`fig_seq2seq`\ 的设计， 并将基于
:numref:`sec_machine_translation`\ 中
介绍的“英－法”数据集来训练这个机器翻译模型。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    import collections
    import math
    import mlx
    import mlx.core as mx
    import mlx.nn as nn
    import mlx.optimizers as optim
    from mlx.utils import tree_flatten
    from d2l import mlx as d2l

编码器
------

从技术上讲，编码器将长度可变的输入序列转换成
形状固定的上下文变量\ :math:`\mathbf{c}`\ ，
并且将输入序列的信息在该上下文变量中进行编码。 如
:numref:`fig_seq2seq`\ 所示，可以使用循环神经网络来设计编码器。

考虑由一个序列组成的样本（批量大小是\ :math:`1`\ ）。
假设输入序列是\ :math:`x_1, \ldots, x_T`\ ，
其中\ :math:`x_t`\ 是输入文本序列中的第\ :math:`t`\ 个词元。
在时间步\ :math:`t`\ ，循环神经网络将词元\ :math:`x_t`\ 的输入特征向量
:math:`\mathbf{x}_t`\ 和\ :math:`\mathbf{h} _{t-1}`\ （即上一时间步的隐状态）
转换为\ :math:`\mathbf{h}_t`\ （即当前步的隐状态）。
使用一个函数\ :math:`f`\ 来描述循环神经网络的循环层所做的变换：

.. math:: \mathbf{h}_t = f(\mathbf{x}_t, \mathbf{h}_{t-1}). 

总之，编码器通过选定的函数\ :math:`q`\ ，
将所有时间步的隐状态转换为上下文变量：

.. math:: \mathbf{c} =  q(\mathbf{h}_1, \ldots, \mathbf{h}_T).

比如，当选择\ :math:`q(\mathbf{h}_1, \ldots, \mathbf{h}_T) = \mathbf{h}_T`\ 时
（就像 :numref:`fig_seq2seq`\ 中一样），
上下文变量仅仅是输入序列在最后时间步的隐状态\ :math:`\mathbf{h}_T`\ 。

到目前为止，我们使用的是一个单向循环神经网络来设计编码器，
其中隐状态只依赖于输入子序列，
这个子序列是由输入序列的开始位置到隐状态所在的时间步的位置
（包括隐状态所在的时间步）组成。
我们也可以使用双向循环神经网络构造编码器，
其中隐状态依赖于两个输入子序列，
两个子序列是由隐状态所在的时间步的位置之前的序列和之后的序列
（包括隐状态所在的时间步）， 因此隐状态对整个序列的信息都进行了编码。

现在，让我们实现循环神经网络编码器。
注意，我们使用了\ *嵌入层*\ （embedding layer）
来获得输入序列中每个词元的特征向量。 嵌入层的权重是一个矩阵，
其行数等于输入词表的大小（\ ``vocab_size``\ ），
其列数等于特征向量的维度（\ ``embed_size``\ ）。
对于任意输入词元的索引\ :math:`i`\ ，
嵌入层获取权重矩阵的第\ :math:`i`\ 行（从\ :math:`0`\ 开始）以返回其特征向量。
另外，本文选择了一个多层门控循环单元来实现编码器。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    #@save
    def init_seq2seq(array):
        if array.ndim > 1:
            weight_fn = nn.init.glorot_uniform()
            array = weight_fn(array)
        return array
    
    class Seq2SeqEncoder(d2l.Encoder): #@save
        """用于序列到序列学习的循环神经网络编码器"""
        def __init__(self, vocab_size, embed_size, num_hiddens, num_layers, dropout=0):
            super().__init__()
            self.embedding = nn.Embedding(vocab_size, embed_size)
            self.rnn = d2l.GRU(embed_size, num_hiddens, num_layers, dropout)
            # print("before init:", tree_flatten(self.parameters()))
            for module in self.modules():
                if isinstance(module, nn.Linear) or isinstance(module, d2l.GRU):
                    module.update(mlx.utils.tree_map(lambda x: init_seq2seq(x), module.parameters()))
    
        def __call__(self, X, *args):
            # X shape: (batch_size, num_steps)
            embs = self.embedding(X.T.astype(mx.int64))
            # embs shape: (num_steps, batch_size, embed_size)
            outputs, state = self.rnn(embs)
            state = mx.array(state)
            # outputs shape: (num_steps, batch_size, num_hiddens)
            # state shape: (num_layers, batch_size, num_hiddens)
            return outputs, state

循环层返回变量的说明可以参考 :numref:`sec_rnn-concise`\ 。

下面，我们实例化上述编码器的实现：
我们使用一个两层门控循环单元编码器，其隐藏单元数为\ :math:`16`\ 。
给定一小批量的输入序列\ ``X``\ （批量大小为\ :math:`4`\ ，时间步为\ :math:`7`\ ）。
在完成所有时间步后，
最后一层的隐状态的输出是一个张量（\ ``output``\ 由编码器的循环层返回），
其形状为（时间步数，批量大小，隐藏单元数）。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    vocab_size, embed_size, num_hiddens, num_layers = 10, 8, 16, 2
    batch_size, num_steps = 4, 7
    encoder = Seq2SeqEncoder(vocab_size, embed_size, num_hiddens, num_layers)
    X = mx.zeros((batch_size, num_steps))
    enc_outputs, enc_state = encoder(X)
    enc_outputs.shape




.. raw:: latex

   \diilbookstyleoutputcell

.. parsed-literal::
    :class: output

    (7, 4, 16)



由于这里使用的是门控循环单元， 所以在最后一个时间步的多层隐状态的形状是
（隐藏层的数量，批量大小，隐藏单元的数量）。
如果使用长短期记忆网络，\ ``state``\ 中还将包含记忆单元信息。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    enc_state.shape




.. raw:: latex

   \diilbookstyleoutputcell

.. parsed-literal::
    :class: output

    (2, 4, 16)



.. _sec_seq2seq_decoder:

解码器
------


正如上文提到的，编码器输出的上下文变量\ :math:`\mathbf{c}`
对整个输入序列\ :math:`x_1, \ldots, x_T`\ 进行编码。
来自训练数据集的输出序列\ :math:`y_1, y_2, \ldots, y_{T'}`\ ，
对于每个时间步\ :math:`t'`\ （与输入序列或编码器的时间步\ :math:`t`\ 不同），
解码器输出\ :math:`y_{t'}`\ 的概率取决于先前的输出子序列
:math:`y_1, \ldots, y_{t'-1}`\ 和上下文变量\ :math:`\mathbf{c}`\ ，
即\ :math:`P(y_{t'} \mid y_1, \ldots, y_{t'-1}, \mathbf{c})`\ 。

为了在序列上模型化这种条件概率，
我们可以使用另一个循环神经网络作为解码器。
在输出序列上的任意时间步\ :math:`t^\prime`\ ，
循环神经网络将来自上一时间步的输出\ :math:`y_{t^\prime-1}`
和上下文变量\ :math:`\mathbf{c}`\ 作为其输入，
然后在当前时间步将它们和上一隐状态
:math:`\mathbf{s}_{t^\prime-1}`\ 转换为
隐状态\ :math:`\mathbf{s}_{t^\prime}`\ 。
因此，可以使用函数\ :math:`g`\ 来表示解码器的隐藏层的变换：

.. math:: \mathbf{s}_{t^\prime} = g(y_{t^\prime-1}, \mathbf{c}, \mathbf{s}_{t^\prime-1}).
   :label: eq_seq2seq_s_t

在获得解码器的隐状态之后， 我们可以使用输出层和softmax操作
来计算在时间步\ :math:`t^\prime`\ 时输出\ :math:`y_{t^\prime}`\ 的条件概率分布
:math:`P(y_{t^\prime} \mid y_1, \ldots, y_{t^\prime-1}, \mathbf{c})`\ 。

根据 :numref:`fig_seq2seq`\ ，当实现解码器时，
我们直接使用编码器最后一个时间步的隐状态来初始化解码器的隐状态。
这就要求使用循环神经网络实现的编码器和解码器具有相同数量的层和隐藏单元。
为了进一步包含经过编码的输入序列的信息，
上下文变量在所有的时间步与解码器的输入进行拼接（concatenate）。
为了预测输出词元的概率分布，
在循环神经网络解码器的最后一层使用全连接层来变换隐状态。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    class Seq2SeqDecoder(d2l.Decoder): #@save
        """The RNN decoder for sequence to sequence learning."""
        def __init__(self, num_inputs, vocab_size, embed_size, num_hiddens, num_layers,
                     dropout=0):
            super().__init__()
            self.embedding = nn.Embedding(vocab_size, embed_size)
            self.rnn = d2l.GRU(embed_size+num_hiddens, num_hiddens,
                               num_layers, dropout)
            self.dense = nn.Linear(num_inputs, vocab_size)
            # print("before init:", tree_flatten(self.parameters()))
            for module in self.modules():
                if isinstance(module, nn.Linear) or isinstance(module, d2l.GRU):
                    module.update(mlx.utils.tree_map(lambda x: init_seq2seq(x), module.parameters()))
    
        def init_state(self, enc_all_outputs, *args):
            return enc_all_outputs
    
        def __call__(self, X, state):
            # X shape: (batch_size, num_steps)
            # embs shape: (num_steps, batch_size, embed_size)
            embs = self.embedding(X.T.astype(mx.int32))
            enc_output, hidden_state = state
            # context shape: (batch_size, num_hiddens)
            context = enc_output[-1]
            # Broadcast context to (num_steps, batch_size, num_hiddens)
            context = mx.tile(context, (embs.shape[0], 1, 1))
            # Concat at the feature dimension
            embs_and_context = mx.concatenate((embs, context), -1)
            outputs, hidden_state = self.rnn(embs_and_context, hidden_state)
            outputs = self.dense(outputs).swapaxes(0, 1)
            # outputs shape: (batch_size, num_steps, vocab_size)
            # hidden_state shape: (num_layers, batch_size, num_hiddens)
            return outputs, [enc_output, hidden_state]

下面，我们用与前面提到的编码器中相同的超参数来实例化解码器。
如我们所见，解码器的输出形状变为（批量大小，时间步数，词表大小），
其中张量的最后一个维度存储预测的词元分布。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    num_inputs = 16
    decoder = Seq2SeqDecoder(num_inputs, vocab_size, embed_size, num_hiddens, num_layers)
    state = decoder.init_state(encoder(X))
    dec_outputs, state = decoder(X, state)
    d2l.check_shape(dec_outputs, (batch_size, num_steps, vocab_size))
    d2l.check_shape(state[1], (num_layers, batch_size, num_hiddens))
    print(dec_outputs.shape)
    print(state[1].shape)


.. raw:: latex

   \diilbookstyleoutputcell

.. parsed-literal::
    :class: output

    (4, 7, 10)
    (2, 4, 16)


总之，上述循环神经网络“编码器－解码器”模型中的各层如
:numref:`fig_seq2seq_details`\ 所示。

.. _fig_seq2seq_details:

.. figure:: ../img/seq2seq-details.svg

   循环神经网络编码器-解码器模型中的层


用于序列到序列学习的编码器-解码器
---------------------------------

将它们全部放在代码中会产生以下结果：

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    #@save
    class Seq2Seq(d2l.EncoderDecoder):
        """The RNN encoder--decoder for sequence to sequence learning."""
        def __init__(self, encoder, decoder, tgt_pad, lr):
            super().__init__(encoder, decoder)
            self.save_hyperparameters()
    
        def validation_step(self, batch):
            Y_hat = self(*batch[:-1])
            self.plot('loss', self.loss(Y_hat, batch[-1]), train=False)
    
        def configure_optimizers(self):
            # Adam optimizer is used here
            return optim.Adam(learning_rate=self.lr)

损失函数
--------

在每个时间步，解码器预测了输出词元的概率分布。
类似于语言模型，可以使用softmax来获得分布，
并通过计算交叉熵损失函数来进行优化。 回想一下
:numref:`sec_machine_translation`\ 中，
特定的填充词元被添加到序列的末尾，
因此不同长度的序列可以以相同形状的小批量加载。
但是，我们应该将填充词元的预测排除在损失函数的计算之外。

为此，我们可以使用下面的\ ``mask``\ 函数 通过零值化屏蔽不相关的项，
以便后面任何不相关预测的计算都是与零的乘积，结果都等于零。
例如，如果两个序列的有效长度（不包括填充词元）分别为\ :math:`1`\ 和\ :math:`2`\ ，
则第一个序列的第一项和第二个序列的前两项之后的剩余项将被清除为零。

我们还可以使用此函数屏蔽最后几个轴上的所有项。如果愿意，也可以使用指定的非零值来替换这些项。

现在，我们可以通过扩展softmax交叉熵损失函数来遮蔽不相关的预测。
最初，所有预测词元的掩码都设置为1。
一旦给定了有效长度，与填充词元对应的掩码将被设置为0。
最后，将所有词元的损失乘以掩码，以过滤掉损失中填充词元产生的不相关预测。

我们可以创建三个相同的序列来进行代码健全性检查，
然后分别指定这些序列的有效长度为\ :math:`4`\ 、\ :math:`2`\ 和\ :math:`0`\ 。
结果就是，第一个序列的损失应为第二个序列的两倍，而第三个序列的损失应为零。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    #@save
    @d2l.add_to_class(Seq2Seq)
    def loss(self, Y_hat, Y):
        l = super(Seq2Seq, self).loss(Y_hat, Y, averaged=False)
        mask = (Y.reshape(-1) != self.tgt_pad).astype(mx.float32)
        return (l * mask).sum() / mask.sum()

训练
----

现在，在机器翻译数据集上，我们可以
创建和训练一个循环神经网络“编码器－解码器”模型用于序列到序列的学习。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    data = d2l.MTFraEng(batch_size=128)
    num_inputs, embed_size, num_hiddens, num_layers, dropout = 256, 256, 256, 2, 0.2
    encoder = Seq2SeqEncoder(
        len(data.src_vocab), embed_size, num_hiddens, num_layers, dropout)
    decoder = Seq2SeqDecoder(
        num_inputs, len(data.tgt_vocab), embed_size, num_hiddens, num_layers, dropout)
    model = Seq2Seq(encoder, decoder, tgt_pad=data.tgt_vocab['<pad>'],
                    lr=0.001)
    trainer = d2l.Trainer(max_epochs=30, gradient_clip_val=1, num_gpus=1)
    trainer.fit(model, data)



.. figure:: output_seq2seq_9a20e0_20_0.svg


现在，在机器翻译数据集上，我们可以
创建和训练一个循环神经网络“编码器－解码器”模型用于序列到序列的学习。

预测
----

为了采用一个接着一个词元的方式预测输出序列，
每个解码器当前时间步的输入都将来自于前一时间步的预测词元。
与训练类似，序列开始词元（“<bos>”） 在初始时间步被输入到解码器中。
该预测过程如 :numref:`fig_seq2seq_predict`\ 所示，
当输出序列的预测遇到序列结束词元（“<eos>”）时，预测就结束了。

.. _fig_seq2seq_predict:

.. figure:: ../img/seq2seq-predict.svg

   使用循环神经网络编码器-解码器逐词元地预测输出序列。


我们将在 :numref:`sec_beam-search`\ 中介绍不同的序列生成策略。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    #@save
    @d2l.add_to_class(d2l.EncoderDecoder)
    def predict_step(self, batch, device, num_steps,
                     save_attention_weights=False):
        src, tgt, src_valid_len, _ = batch
        enc_all_outputs = self.encoder(src, src_valid_len)
        dec_state = self.decoder.init_state(enc_all_outputs, src_valid_len)
        outputs, attention_weights = [tgt[:, (0)].reshape(-1 ,1), ], []
        for _ in range(num_steps):
            Y, dec_state = self.decoder(outputs[-1], dec_state)
            outputs.append(Y.argmax(2))
            # Save attention weights (to be covered later)
            if save_attention_weights:
                attention_weights.append(self.decoder.attention_weights)
        return mx.concatenate(outputs[1:], 1), attention_weights

预测序列的评估
--------------

我们可以通过与真实的标签序列进行比较来评估预测序列。 虽然
:cite:`Papineni.Roukos.Ward.ea.2002` 提出的BLEU（bilingual evaluation
understudy） 最先是用于评估机器翻译的结果，
但现在它已经被广泛用于测量许多应用的输出序列的质量。
原则上说，对于预测序列中的任意\ :math:`n`\ 元语法（n-grams），
BLEU的评估都是这个\ :math:`n`\ 元语法是否出现在标签序列中。

我们将BLEU定义为：

.. math::  \exp\left(\min\left(0, 1 - \frac{\mathrm{len}_{\text{label}}}{\mathrm{len}_{\text{pred}}}\right)\right) \prod_{n=1}^k p_n^{1/2^n},
   :label: eq_bleu

其中\ :math:`\mathrm{len}_{\text{label}}`\ 表示标签序列中的词元数和
:math:`\mathrm{len}_{\text{pred}}`\ 表示预测序列中的词元数，
:math:`k`\ 是用于匹配的最长的\ :math:`n`\ 元语法。
另外，用\ :math:`p_n`\ 表示\ :math:`n`\ 元语法的精确度，它是两个数量的比值：
第一个是预测序列与标签序列中匹配的\ :math:`n`\ 元语法的数量，
第二个是预测序列中\ :math:`n`\ 元语法的数量的比率。
具体地说，给定标签序列\ :math:`A`\ 、\ :math:`B`\ 、\ :math:`C`\ 、\ :math:`D`\ 、\ :math:`E`\ 、\ :math:`F`
和预测序列\ :math:`A`\ 、\ :math:`B`\ 、\ :math:`B`\ 、\ :math:`C`\ 、\ :math:`D`\ ，
我们有\ :math:`p_1 = 4/5`\ 、\ :math:`p_2 = 3/4`\ 、\ :math:`p_3 = 1/3`\ 和\ :math:`p_4 = 0`\ 。

根据 :eq:`eq_bleu`\ 中BLEU的定义，
当预测序列与标签序列完全相同时，BLEU为\ :math:`1`\ 。
此外，由于\ :math:`n`\ 元语法越长则匹配难度越大，
所以BLEU为更长的\ :math:`n`\ 元语法的精确度分配更大的权重。
具体来说，当\ :math:`p_n`\ 固定时，\ :math:`p_n^{1/2^n}`
会随着\ :math:`n`\ 的增长而增加（原始论文使用\ :math:`p_n^{1/n}`\ ）。
而且，由于预测的序列越短获得的\ :math:`p_n`\ 值越高， 所以
:eq:`eq_bleu`\ 中乘法项之前的系数用于惩罚较短的预测序列。
例如，当\ :math:`k=2`\ 时，给定标签序列\ :math:`A`\ 、\ :math:`B`\ 、\ :math:`C`\ 、\ :math:`D`\ 、\ :math:`E`\ 、\ :math:`F`
和预测序列\ :math:`A`\ 、\ :math:`B`\ ，尽管\ :math:`p_1 = p_2 = 1`\ ，
惩罚因子\ :math:`\exp(1-6/2) \approx 0.14`\ 会降低BLEU。

BLEU的代码实现如下。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    def bleu(pred_seq, label_seq, k):  #@save
        """计算BLEU"""
        pred_tokens, label_tokens = pred_seq.split(' '), label_seq.split(' ')
        len_pred, len_label = len(pred_tokens), len(label_tokens)
        score = math.exp(min(0, 1 - len_label / len_pred))
        for n in range(1, min(k, len_pred) + 1):
            num_matches, label_subs = 0, collections.defaultdict(int)
            for i in range(len_label - n + 1):
                label_subs[' '.join(label_tokens[i: i + n])] += 1
            for i in range(len_pred - n + 1):
                if label_subs[' '.join(pred_tokens[i: i + n])] > 0:
                    num_matches += 1
                    label_subs[' '.join(pred_tokens[i: i + n])] -= 1
            score *= math.pow(num_matches / (len_pred - n + 1), math.pow(0.5, n))
        return score

最后，利用训练好的循环神经网络“编码器－解码器”模型，
将几个英语句子翻译成法语，并计算BLEU的最终结果。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    engs = ['go .', 'i lost .', 'he\'s calm .', 'i\'m home .']
    fras = ['va !', 'j\'ai perdu .', 'il est calme .', 'je suis chez moi .']
    preds, _ = model.predict_step(
        data.build(engs, fras), d2l.try_gpu(), data.num_steps)
    preds = preds.tolist()
    for en, fr, p in zip(engs, fras, preds):
        translation = []
        for token in data.tgt_vocab.to_tokens(p):
            if token == '<eos>':
                break
            translation.append(token)
        print(f'{en} => {translation}, bleu,'
              f'{bleu(" ".join(translation), fr, k=2):.3f}')


.. raw:: latex

   \diilbookstyleoutputcell

.. parsed-literal::
    :class: output

    go . => ['<unk>', '!'], bleu,0.000
    i lost . => ['je', 'suis', '<unk>', '.'], bleu,0.000
    he's calm . => ['<unk>', '.'], bleu,0.000
    i'm home . => ['je', 'suis', 'libre', '.'], bleu,0.512


小结
----

-  根据“编码器-解码器”架构的设计，
   我们可以使用两个循环神经网络来设计一个序列到序列学习的模型。
-  在实现编码器和解码器时，我们可以使用多层循环神经网络。
-  我们可以使用遮蔽来过滤不相关的计算，例如在计算损失时。
-  在“编码器－解码器”训练中，强制教学方法将原始输出序列（而非预测结果）输入解码器。
-  BLEU是一种常用的评估方法，它通过测量预测序列和标签序列之间的\ :math:`n`\ 元语法的匹配度来评估预测。

练习
----

1. 试着通过调整超参数来改善翻译效果。
2. 重新运行实验并在计算损失时不使用遮蔽，可以观察到什么结果？为什么会有这个结果？
3. 如果编码器和解码器的层数或者隐藏单元数不同，那么如何初始化解码器的隐状态？
4. 在训练中，如果用前一时间步的预测输入到解码器来代替强制教学，对性能有何影响？
5. 用长短期记忆网络替换门控循环单元重新运行实验。
6. 有没有其他方法来设计解码器的输出层？
