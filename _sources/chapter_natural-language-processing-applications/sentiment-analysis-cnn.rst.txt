
.. _sec_sentiment_cnn:

情感分析：使用卷积神经网络
==========================


在
:numref:`chap_cnn`\ 中，我们探讨了使用二维卷积神经网络处理二维图像数据的机制，并将其应用于局部特征，如相邻像素。虽然卷积神经网络最初是为计算机视觉设计的，但它也被广泛用于自然语言处理。简单地说，只要将任何文本序列想象成一维图像即可。通过这种方式，一维卷积神经网络可以处理文本中的局部特征，例如\ :math:`n`\ 元语法。

本节将使用\ *textCNN*\ 模型来演示如何设计一个表示单个文本
:cite:`Kim.2014`\ 的卷积神经网络架构。与
:numref:`fig_nlp-map-sa-rnn`\ 中使用带有GloVe预训练的循环神经网络架构进行情感分析相比，
:numref:`fig_nlp-map-sa-cnn`\ 中唯一的区别在于架构的选择。

.. _fig_nlp-map-sa-cnn:

.. figure:: ../img/nlp-map-sa-cnn.svg

   将GloVe放入卷积神经网络架构进行情感分析


.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    import mlx.core as mx
    import mlx.nn as nn
    import mlx.optimizers as optim
    from d2l import mlx as d2l
    
    batch_size = 64
    train_iter, test_iter, vocab = d2l.load_data_imdb(batch_size)

一维卷积
--------

在介绍该模型之前，让我们先看看一维卷积是如何工作的。请记住，这只是基于互相关运算的二维卷积的特例。

.. _fig_conv1d:

.. figure:: ../img/conv1d.svg

   一维互相关运算。阴影部分是第一个输出元素以及用于输出计算的输入和核张量元素：\ :math:`0\times1+1\times2=2`


如
:numref:`fig_conv1d`\ 中所示，在一维情况下，卷积窗口在输入张量上从左向右滑动。在滑动期间，卷积窗口中某个位置包含的输入子张量（例如，
:numref:`fig_conv1d`\ 中的\ :math:`0`\ 和\ :math:`1`\ ）和核张量（例如，
:numref:`fig_conv1d`\ 中的\ :math:`1`\ 和\ :math:`2`\ ）按元素相乘。这些乘法的总和在输出张量的相应位置给出单个标量值（例如，
:numref:`fig_conv1d`\ 中的\ :math:`0\times1+1\times2=2`\ ）。

我们在下面的\ ``corr1d``\ 函数中实现了一维互相关。给定输入张量\ ``X``\ 和核张量\ ``K``\ ，它返回输出张量\ ``Y``\ 。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    def corr1d(X, K):
        w = K.shape[0]
        Y = mx.zeros((X.shape[0] - w + 1))
        for i in range(Y.shape[0]):
            Y[i] = (X[i: i + w] * K).sum()
        return Y

我们可以从
:numref:`fig_conv1d`\ 构造输入张量\ ``X``\ 和核张量\ ``K``\ 来验证上述一维互相关实现的输出。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    X, K = mx.array([0, 1, 2, 3, 4, 5, 6]), mx.array([1, 2])
    corr1d(X, K)




.. raw:: latex

   \diilbookstyleoutputcell

.. parsed-literal::
    :class: output

    array([2, 5, 8, 11, 14, 17], dtype=float32)



对于任何具有多个通道的一维输入，卷积核需要具有相同数量的输入通道。然后，对于每个通道，对输入的一维张量和卷积核的一维张量执行互相关运算，将所有通道上的结果相加以产生一维输出张量。
:numref:`fig_conv1d_channel`\ 演示了具有3个输入通道的一维互相关操作。

.. _fig_conv1d_channel:

.. figure:: ../img/conv1d-channel.svg

   具有3个输入通道的一维互相关运算。阴影部分是第一个输出元素以及用于输出计算的输入和核张量元素：\ :math:`2\times(-1)+3\times(-3)+1\times3+2\times4+0\times1+1\times2=2`


我们可以实现多个输入通道的一维互相关运算，并在
:numref:`fig_conv1d_channel`\ 中验证结果。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    def corr1d_multi_in(X, K):
        # 首先，遍历'X'和'K'的第0维（通道维）。然后，把它们加在一起
        return sum(corr1d(x, k) for x, k in zip(X, K))
    
    X = mx.array([[0, 1, 2, 3, 4, 5, 6],
                  [1, 2, 3, 4, 5, 6, 7],
                  [2, 3, 4, 5, 6, 7, 8]])
    K = mx.array([[1, 2], [3, 4], [-1, -3]])
    corr1d_multi_in(X, K)




.. raw:: latex

   \diilbookstyleoutputcell

.. parsed-literal::
    :class: output

    array([2, 8, 14, 20, 26, 32], dtype=float32)



注意，多输入通道的一维互相关等同于单输入通道的二维互相关。举例说明，
:numref:`fig_conv1d_channel`\ 中的多输入通道一维互相关的等价形式是
:numref:`fig_conv1d_2d`\ 中的单输入通道二维互相关，其中卷积核的高度必须与输入张量的高度相同。

.. _fig_conv1d_2d:

.. figure:: ../img/conv1d-2d.svg

   具有单个输入通道的二维互相关操作。阴影部分是第一个输出元素以及用于输出计算的输入和内核张量元素：
   :math:`2\times(-1)+3\times(-3)+1\times3+2\times4+0\times1+1\times2=2`


:numref:`fig_conv1d`\ 和
:numref:`fig_conv1d_channel`\ 中的输出都只有一个通道。与
:numref:`subsec_multi-output-channels`\ 中描述的具有多个输出通道的二维卷积相同，我们也可以为一维卷积指定多个输出通道。

最大时间汇聚层
--------------

类似地，我们可以使用汇聚层从序列表示中提取最大值，作为跨时间步的最重要特征。textCNN中使用的\ *最大时间汇聚层*\ 的工作原理类似于一维全局汇聚
:cite:`Collobert.Weston.Bottou.ea.2011`\ 。对于每个通道在不同时间步存储值的多通道输入，每个通道的输出是该通道的最大值。请注意，最大时间汇聚允许在不同通道上使用不同数量的时间步。

textCNN模型
-----------

使用一维卷积和最大时间汇聚，textCNN模型将单个预训练的词元表示作为输入，然后获得并转换用于下游应用的序列表示。

对于具有由\ :math:`d`\ 维向量表示的\ :math:`n`\ 个词元的单个文本序列，输入张量的宽度、高度和通道数分别为\ :math:`n`\ 、\ :math:`1`\ 和\ :math:`d`\ 。textCNN模型将输入转换为输出，如下所示：

1. 定义多个一维卷积核，并分别对输入执行卷积运算。具有不同宽度的卷积核可以捕获不同数目的相邻词元之间的局部特征。
2. 在所有输出通道上执行最大时间汇聚层，然后将所有标量汇聚输出连结为向量。
3. 使用全连接层将连结后的向量转换为输出类别。Dropout可以用来减少过拟合。

.. _fig_conv1d_textcnn:

.. figure:: ../img/textcnn.svg

   textCNN的模型架构


:numref:`fig_conv1d_textcnn`\ 通过一个具体的例子说明了textCNN的模型架构。输入是具有11个词元的句子，其中每个词元由6维向量表示。因此，我们有一个宽度为11的6通道输入。定义两个宽度为2和4的一维卷积核，分别具有4个和5个输出通道。它们产生4个宽度为\ :math:`11-2+1=10`\ 的输出通道和5个宽度为\ :math:`11-4+1=8`\ 的输出通道。尽管这9个通道的宽度不同，但最大时间汇聚层给出了一个连结的9维向量，该向量最终被转换为用于二元情感预测的2维输出向量。

定义模型
~~~~~~~~

我们在下面的类中实现textCNN模型。与
:numref:`sec_sentiment_rnn`\ 的双向循环神经网络模型相比，除了用卷积层代替循环神经网络层外，我们还使用了两个嵌入层：一个是可训练权重，另一个是固定权重。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    class TextCNN(nn.Module):
        def __init__(self, vocab_size, embed_size, kernel_sizes, num_channels,
                     **kwargs):
            super(TextCNN, self).__init__(**kwargs)
            self.embedding = nn.Embedding(vocab_size, embed_size)
            # 这个嵌入层不需要训练
            self.constant_embedding = nn.Embedding(vocab_size, embed_size)
            self.dropout = nn.Dropout(0.5)
            self.decoder = nn.Linear(sum(num_channels), 2)
            # 最大时间汇聚层没有参数，因此可以共享此实例
            self.pool = d2l.AdaptiveAvgPool1d(1)
            self.relu = nn.ReLU()
            # 创建多个一维卷积层
            self.convs = []
            for c, k in zip(num_channels, kernel_sizes):
                self.convs.append(nn.Conv1d(2 * embed_size, c, k))
    
        def __call__(self, inputs):
            # 沿着向量维度将两个嵌入层连结起来，
            # 每个嵌入层的输出形状都是（批量大小，词元数量，词元向量维度）连结起来
            embeddings = mx.concat((
                self.embedding(inputs), self.constant_embedding(inputs)), axis=2)
            # 根据一维卷积层的输入格式，重新排列张量，以便通道作为第2维
            # 每个一维卷积层在最大时间汇聚层合并后，获得的张量形状是（批量大小，通道数，1）
            # 删除最后一个维度并沿通道维度连结
            encoding = mx.concat([
                mx.squeeze(self.relu(self.pool(conv(embeddings))), axis=1)
                for conv in self.convs], axis=1)
            outputs = self.decoder(self.dropout(encoding))
            return outputs

让我们创建一个textCNN实例。它有3个卷积层，卷积核宽度分别为3、4和5，均有100个输出通道。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    embed_size, kernel_sizes, nums_channels = 100, [3, 4, 5], [100, 100, 100]
    net = TextCNN(len(vocab), embed_size, kernel_sizes, nums_channels)

加载预训练词向量
~~~~~~~~~~~~~~~~

与
:numref:`sec_sentiment_rnn`\ 相同，我们加载预训练的100维GloVe嵌入作为初始化的词元表示。这些词元表示（嵌入权重）在\ ``embedding``\ 中将被训练，在\ ``constant_embedding``\ 中将被固定。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    glove_embedding = d2l.TokenEmbedding('glove.6b.100d')
    embeds = glove_embedding[vocab.idx_to_token]
    net.embedding.weight = mx.array(embeds)
    net.constant_embedding.weight = mx.array(embeds)
    net.constant_embedding.freeze()


.. raw:: latex

   \diilbookstyleoutputcell

.. parsed-literal::
    :class: output

    正在从http://d2l-data.s3-accelerate.amazonaws.com/glove.6B.100d.zip下载../data/glove.6B.100d.zip...




.. raw:: latex

   \diilbookstyleoutputcell

.. parsed-literal::
    :class: output

    Embedding(49346, 100)



训练和评估模型
~~~~~~~~~~~~~~

现在我们可以训练textCNN模型进行情感分析。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    # 获取批量数
    def get_num_batch(iter):
        num_batches = 0
        for sample in iter:
            num_batches += 1
        iter.reset()
        return num_batches
    
    lr, num_epochs = 0.001, 5
    trainer = optim.Adam(learning_rate=lr)
    loss = nn.losses.cross_entropy
    num_batches = get_num_batch(train_iter)
    d2l.train_ch13(net, train_iter, num_batches, test_iter, loss, trainer, num_epochs)


.. raw:: latex

   \diilbookstyleoutputcell

.. parsed-literal::
    :class: output

    loss 0.053, train acc 0.983, test acc 0.861
    4588.3 examples/sec 



.. figure:: output_sentiment-analysis-cnn_a6d733_15_1.svg


下面，我们使用训练好的模型来预测两个简单句子的情感。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    #@save
    def predict_sentiment(net, vocab, sequence):
        """预测文本序列的情感"""
        sequence = mx.array(vocab[sequence.split()])
        label = mx.argmax(net(sequence.reshape(1, -1)), axis=1)
        return 'positive' if label == 1 else 'negative'
    
    d2l.predict_sentiment(net, vocab, 'this movie is so great')




.. raw:: latex

   \diilbookstyleoutputcell

.. parsed-literal::
    :class: output

    'positive'



.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    d2l.predict_sentiment(net, vocab, 'this movie is so bad')




.. raw:: latex

   \diilbookstyleoutputcell

.. parsed-literal::
    :class: output

    'negative'



小结
----

-  一维卷积神经网络可以处理文本中的局部特征，例如\ :math:`n`\ 元语法。
-  多输入通道的一维互相关等价于单输入通道的二维互相关。
-  最大时间汇聚层允许在不同通道上使用不同数量的时间步长。
-  textCNN模型使用一维卷积层和最大时间汇聚层将单个词元表示转换为下游应用输出。

练习
----

1. 调整超参数，并比较
   :numref:`sec_sentiment_rnn`\ 中用于情感分析的架构和本节中用于情感分析的架构，例如在分类精度和计算效率方面。
2. 请试着用
   :numref:`sec_sentiment_rnn`\ 练习中介绍的方法进一步提高模型的分类精度。
3. 在输入表示中添加位置编码。它是否提高了分类的精度？
